(function () {
    "use strict";

    function Waypoint(options) {
        if (!options) {
            throw new Error("No options passed to Waypoint constructor");
        }
        if (!options.element) {
            throw new Error("No element option passed to Waypoint constructor");
        }
        if (!options.handler) {
            throw new Error("No handler option passed to Waypoint constructor");
        }

        this.key = "waypoint-" + counter;
        this.options = Waypoint.Adapter.extend({}, Waypoint.defaults, options);
        this.element = this.options.element;
        this.adapter = new Waypoint.Adapter(this.element);
        this.callback = options.handler;
        this.axis = this.options.horizontal ? "horizontal" : "vertical";
        this.enabled = this.options.enabled;
        this.triggerPoint = null;
        this.group = Waypoint.Group.findOrCreate({
            name: this.options.group,
            axis: this.axis
        });
        this.context = Waypoint.Context.findOrCreateByElement(this.options.context);

        if (Waypoint.offsetAliases[this.options.offset]) {
            this.options.offset = Waypoint.offsetAliases[this.options.offset];
        }

        this.group.add(this);
        this.context.add(this);
        instances[this.key] = this;
        counter += 1;
    }

    var counter = 0;
    var instances = {};

    Waypoint.prototype.queueTrigger = function (t) {
        this.group.queueTrigger(this, t);
    };

    Waypoint.prototype.trigger = function (t) {
        if (this.enabled && this.callback) {
            this.callback.apply(this, t);
        }
    };

    Waypoint.prototype.destroy = function () {
        this.context.remove(this);
        this.group.remove(this);
        delete instances[this.key];
    };

    Waypoint.prototype.disable = function () {
        this.enabled = false;
        return this;
    };

    Waypoint.prototype.enable = function () {
        this.context.refresh();
        this.enabled = true;
        return this;
    };

    Waypoint.prototype.next = function () {
        return this.group.next(this);
    };

    Waypoint.prototype.previous = function () {
        return this.group.previous(this);
    };

    Waypoint.invokeAll = function (t) {
        var instancesArray = [];
        for (var key in instances) {
            instancesArray.push(instances[key]);
        }
        for (var i = 0; i < instancesArray.length; i++) {
            instancesArray[i][t]();
        }
    };

    Waypoint.destroyAll = function () {
        Waypoint.invokeAll("destroy");
    };

    Waypoint.disableAll = function () {
        Waypoint.invokeAll("disable");
    };

    Waypoint.enableAll = function () {
        Waypoint.Context.refreshAll();
        for (var key in instances) {
            instances[key].enabled = true;
        }
        return this;
    };

    Waypoint.refreshAll = function () {
        Waypoint.Context.refreshAll();
    };

    Waypoint.viewportHeight = function () {
        return window.innerHeight || document.documentElement.clientHeight;
    };

    Waypoint.viewportWidth = function () {
        return document.documentElement.clientWidth;
    };

    Waypoint.adapters = [];
    Waypoint.defaults = {
        context: window,
        continuous: true,
        enabled: true,
        group: "default",
        horizontal: false,
        offset: 0
    };

    Waypoint.offsetAliases = {
        "bottom-in-view": function () {
            return this.context.innerHeight() - this.adapter.outerHeight();
        },
        "right-in-view": function () {
            return this.context.innerWidth() - this.adapter.outerWidth();
        }
    };

    window.Waypoint = Waypoint;
})();

(function () {
    "use strict";

    function requestAnimationFrame(t) {
        var i = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (t) {
            window.setTimeout(t, 1e3 / 60);
        };
        i.call(window, t);
    }

    function WaypointContext(element) {
        this.element = element;
        this.Adapter = Waypoint.Adapter;
        this.adapter = new this.Adapter(element);
        this.key = "waypoint-context-" + contextCounter;
        this.didScroll = false;
        this.didResize = false;
        this.oldScroll = {
            x: this.adapter.scrollLeft(),
            y: this.adapter.scrollTop()
        };
        this.waypoints = {
            vertical: {},
            horizontal: {}
        };
        element.waypointContextKey = this.key;
        contexts[this.key] = this;
        contextCounter += 1;
        this.createThrottledScrollHandler();
        this.createThrottledResizeHandler();
    }

    var contextCounter = 0;
    var contexts = {};
    var Waypoint = window.Waypoint;

    WaypointContext.prototype.add = function (waypoint) {
        var axis = waypoint.options.horizontal ? "horizontal" : "vertical";
        this.waypoints[axis][waypoint.key] = waypoint;
        this.refresh();
    };

    WaypointContext.prototype.checkEmpty = function () {
        var horizontalEmpty = this.Adapter.isEmptyObject(this.waypoints.horizontal);
        var verticalEmpty = this.Adapter.isEmptyObject(this.waypoints.vertical);
        var isWindow = this.element == this.element.window;

        if (horizontalEmpty && verticalEmpty && !isWindow) {
            this.adapter.off(".waypoints");
            delete contexts[this.key];
        }
    };

    WaypointContext.prototype.createThrottledResizeHandler = function () {
        var self = this;

        function resizeHandler() {
            self.handleResize();
            self.didResize = false;
        }

        this.adapter.on("resize.waypoints", function () {
            if (!self.didResize) {
                self.didResize = true;
                requestAnimationFrame(resizeHandler);
            }
        });
    };

    WaypointContext.prototype.createThrottledScrollHandler = function () {
        var self = this;

        function scrollHandler() {
            self.handleScroll();
            self.didScroll = false;
        }

        this.adapter.on("scroll.waypoints", function () {
            if (!self.didScroll || Waypoint.isTouch) {
                self.didScroll = true;
                requestAnimationFrame(scrollHandler);
            }
        });
    };

    WaypointContext.prototype.handleResize = function () {
        Waypoint.Context.refreshAll();
    };

    WaypointContext.prototype.handleScroll = function () {
        var triggeredGroups = {
            horizontal: {
                newScroll: this.adapter.scrollLeft(),
                oldScroll: this.oldScroll.x,
                forward: "right",
                backward: "left"
            },
            vertical: {
                newScroll: this.adapter.scrollTop(),
                oldScroll: this.oldScroll.y,
                forward: "down",
                backward: "up"
            }
        };

        for (var axis in triggeredGroups) {
            var axisGroup = triggeredGroups[axis];
            for (var key in this.waypoints[axis]) {
                var waypoint = this.waypoints[axis][key];
                if (waypoint.triggerPoint !== null) {
                    var oldScroll = axisGroup.oldScroll < waypoint.triggerPoint;
                    var newScroll = axisGroup.newScroll >= waypoint.triggerPoint;
                    var forward = oldScroll && newScroll;
                    var backward = !oldScroll && !newScroll;
                    if (forward || backward) {
                        waypoint.queueTrigger(axisGroup.backward);
                    }
                }
            }
        }
    }    
   
})();    

